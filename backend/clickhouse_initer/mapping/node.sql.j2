SET allow_experimental_geo_types=1;

CREATE DATABASE IF NOT EXISTS datawagon;
CREATE DATABASE IF NOT EXISTS datawagon_replica;

CREATE TABLE IF NOT EXISTS datawagon.status_route_queue
(
    `geo.latitude`          Float64,
    `geo.longitude`         Float64,
    train_id                UUID,
    speed                   Float64,
    num_railway_carriage    UInt8,
    status                  String,
    datetime                DateTime,
    railway_id              UUID
)
ENGINE=Kafka()
SETTINGS
kafka_broker_list = '{{ kafka.SERVERS }}',
kafka_topic_list = '{{ kafka.TOPICS.STATUS_ROUTE }}',
kafka_group_name = 'status_route_group1',
kafka_format = 'JSONEachRow',
input_format_import_nested_json=1;


CREATE TABLE IF NOT EXISTS datawagon.status_route
(
    id                      UUID,
    train_id                UUID,
    railway_id              UUID,
    geo                     Point,
    status                  String,
    speed                   Float64,
    num_railway_carriage    UInt8,
    datetime                DateTime,
    created_at              DateTime  DEFAULT now()
)
Engine=ReplicatedMergeTree('{{ node.STATUS_ROUTE.REPLICA_PATH }}', '{{ node.STATUS_ROUTE.REPLICA_NAME }}')
PARTITION BY toYYYYMMDD(created_at)
ORDER BY (id);


CREATE MATERIALIZED VIEW IF NOT EXISTS datawagon.status_route_consumer
TO datawagon.status_route
AS SELECT railway_id, status, speed, tuple(geo.latitude, geo.longitude) as geo, datetime, generateUUIDv4() as id
FROM datawagon.status_route_queue;


CREATE TABLE IF NOT EXISTS default.{{ node.STATUS_ROUTE.DISTRIBUTED_TABLE }}
(
    id                      UUID,
    train_id                UUID,
    railway_id              UUID,
    geo                     Point,
    status                  String,
    speed                   Float64,
    num_railway_carriage    UInt8,
    datetime                DateTime,
    created_at              DateTime  DEFAULT now()
)
ENGINE = Distributed({{ node.CLUSTER }}, '', {{ node.STATUS_ROUTE.DISTRIBUTED_TABLE }}, rand());
