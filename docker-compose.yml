x-base-service: &base_service
  env_file: .env
  networks:
    - datawood

x-redis: &base_redis
  image: redis:7.2.2-alpine
  container_name: redis
  restart: unless-stopped
  command: >
    --requirepass ${REDIS_PASSWORD}
  expose:
    - ${REDIS_PORT}
  healthcheck:
    test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
    interval: 30s
    timeout: 10s
    retries: 5

x-base-kafka: &base_kafka
  <<: *base_service
  image: bitnami/kafka:3.6.0
  
x-base-clickhouse-node: &base-clickhouse-node
  env_file: .env
  mem_limit: 8g
  expose:
    - 9000
    - 8123
  ulimits:
    memlock:
      soft: -1
      hard: -1
  healthcheck:
    test: curl http://x-base-clickhouse-node:8123 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
    interval: 30s
    timeout: 10s
    retries: 5


services:

  nginx:
    <<: *base_service
    image: nginx:1.25.3-alpine
    container_name: nginx
    restart: unless-stopped
    profiles:
      - dev
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs:/etc/nginx/conf.d:ro
      - ./nginx/static/errors:/var/www/errors/:ro
      - ./nginx/static/log/udp_error_log:/var/log/nginx/udp_error.log:rw
      - ./nginx/static/log/access_log:/var/log/nginx/access.log:rw
      - ./nginx/static/log/error_log:/var/log/nginx/error.log:rw
    ports:
      - 80:80

  producer:
    <<: *base_service
    build: ./backend/producer
    container_name: producer
    env_file: .env
    profiles:
      - dev
    volumes:
      - ./backend/producer:/opt/producer
    expose:
      - ${PRODUCER_PORT}
    healthcheck:
      test: curl http://producer:${PRODUCER_PORT} >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    <<: *base_service
    <<: *base_redis
    container_name: redis
    profiles:
      - dev
    volumes:
      - redis-data:/data

  kafka01:
    <<: *base_kafka
    hostname: kafka01
    container_name: kafka01
    env_file: .env
    restart: unless-stopped
    profiles:
      - dev
    volumes:
        - kafka01-data:/bitnami/kafka/data:rw
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka01:9093,2@kafka02:9093,3@kafka03:9093

  kafka02:
    <<: *base_kafka
    hostname: kafka02
    container_name: kafka02
    env_file: .env
    restart: unless-stopped
    profiles:
      - dev
    volumes:
        - kafka02-data:/bitnami/kafka/data:rw
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka01:9093,2@kafka02:9093,3@kafka03:9093

  kafka03:
    <<: *base_kafka
    hostname: kafka03
    container_name: kafka03
    env_file: .env
    restart: unless-stopped
    profiles:
      - dev
    volumes:
        - kafka03-data:/bitnami/kafka/data:rw
    environment:
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka01:9093,2@kafka02:9093,3@kafka03:9093

  clickhouse-initer:
    <<: *base_service
    build: ./backend/clickhouse_initer
    container_name: clickhouse-initer
    env_file: .env
    profiles: 
      - dev
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./backend/clickhouse_initer/mapping:/opt/clickhouse_initer/mapping:ro
      - ./backend/clickhouse_initer/data:/opt/clickhouse_initer/data:ro
    depends_on:
      clickhouse-node01:
        condition: service_healthy
      clickhouse-node02:
        condition: service_healthy
      clickhouse-node03:
        condition: service_healthy
      clickhouse-node04:
        condition: service_healthy
      clickhouse-node05:
        condition: service_healthy
      clickhouse-node06:
        condition: service_healthy
 
  clickhouse-node01:
    <<: *base_service
    <<: *base-clickhouse-node
    build: 
      context: ./clickhouse/
      dockerfile: keeper.Dockerfile
    container_name: clickhouse-node01
    profiles:
      - dev
    environment:
      CH_NODE_HOST_NAME: clickhouse-node01
      CH_NODE_SHARD_ID: 1
      CH_NODE_REPLICA_NAME: clickhouse-node01
      CH_KEEPER_SERVER_ID: 1
      CH_PASSWORD: ${CLICKHOUSE_NODE01_PASSWORD}

  clickhouse-node02:
    <<: *base_service
    <<: *base-clickhouse-node
    build:
      context: ./clickhouse/
      dockerfile: node.Dockerfile
    container_name: clickhouse-node02
    profiles:
      - dev
    environment:
      CH_NODE_HOST_NAME: clickhouse-node02
      CH_NODE_SHARD_ID: 1
      CH_NODE_REPLICA_NAME: clickhouse-node02
      CH_PASSWORD: ${CLICKHOUSE_NODE02_PASSWORD}
    depends_on:
      clickhouse-keeper-quorum:
        condition: service_healthy
      clickhouse-node01:
        condition: service_healthy

  clickhouse-node03:
    <<: *base_service
    <<: *base-clickhouse-node
    build: 
      context: ./clickhouse/
      dockerfile: keeper.Dockerfile
    container_name: clickhouse-node03
    environment:
      CH_NODE_HOST_NAME: clickhouse-node03
      CH_NODE_SHARD_ID: 2
      CH_NODE_REPLICA_NAME: clickhouse-node03
      CH_KEEPER_SERVER_ID: 2
      CH_PASSWORD: ${CLICKHOUSE_NODE03_PASSWORD}
    profiles:
      - dev

  clickhouse-node04:
    <<: *base_service
    <<: *base-clickhouse-node
    build: 
      context: ./clickhouse/
      dockerfile: node.Dockerfile
    container_name: clickhouse-node04
    profiles:
      - dev
    environment:
      CH_NODE_HOST_NAME: clickhouse-node04
      CH_NODE_SHARD_ID: 2
      CH_NODE_REPLICA_NAME: clickhouse-node04
      CH_PASSWORD: ${CLICKHOUSE_NODE04_PASSWORD}
    depends_on:
      clickhouse-keeper-quorum:
        condition: service_healthy
      clickhouse-node03:
        condition: service_healthy

  clickhouse-node05:
    <<: *base_service
    <<: *base-clickhouse-node
    build: 
      context: ./clickhouse/
      dockerfile: keeper.Dockerfile
    container_name: clickhouse-node05
    environment:
      CH_NODE_HOST_NAME: clickhouse-node05
      CH_NODE_SHARD_ID: 3
      CH_NODE_REPLICA_NAME: clickhouse-node05
      CH_KEEPER_SERVER_ID: 3
      CH_PASSWORD: ${CLICKHOUSE_NODE05_PASSWORD}
    profiles:
      - dev

  clickhouse-node06:
    <<: *base_service
    <<: *base-clickhouse-node
    build: 
      context: ./clickhouse/
      dockerfile: node.Dockerfile
    container_name: clickhouse-node06
    profiles:
      - dev
    environment:
      CH_NODE_HOST_NAME: clickhouse-node06
      CH_NODE_SHARD_ID: 3
      CH_NODE_REPLICA_NAME: clickhouse-node06
      CH_PASSWORD: ${CLICKHOUSE_NODE06_PASSWORD}
    depends_on:
      clickhouse-keeper-quorum:
        condition: service_healthy
      clickhouse-node05:
        condition: service_healthy

  clickhouse-keeper-quorum:
    <<: *base_service
    <<: *base-clickhouse-node
    build: 
      context: ./clickhouse/
      dockerfile: keeper.Dockerfile
    container_name: clickhouse-keeper-quorum
    environment:
      CH_NODE_HOST_NAME: clickhouse-keeper-quorum
      CH_NODE_SHARD_ID: 0
      CH_NODE_REPLICA_NAME: clickhouse-keeper-quorum
      CH_KEEPER_SERVER_ID: 4
    depends_on:
      - clickhouse-node01
      - clickhouse-node03
      - clickhouse-node05


volumes:
  kafka01-data:
  kafka02-data:
  kafka03-data:
  redis-data:
  airflow-db:

networks:
  datawood:
    driver: bridge
